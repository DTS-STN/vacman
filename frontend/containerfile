# Containerfile for building the Vacancy Manager frontend application.
#
# This file is designed to optimize Podman's layer caching and reduce image size
# for production deployments. Think carefully before you edit this file.
#
# Build arguments with default values for build metadata:
#   - BUILD_DATE: The date the build was created (default: "1970-01-01T00:00:00.000Z").
#   - BUILD_ID: The unique identifier for the build (default: "000000").
#   - BUILD_REVISION: The source control revision hash (default: "00000000").
#   - BUILD_VERSION: The version of the application being built (default: "0.0.0").

# Example build and run commands:
#
#   $ podman build . --tag vacman-frontend --file containerfile \
#       --build-arg BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
#       --build-arg BUILD_ID="000001" \
#       --build-arg BUILD_REVISION="$(git rev-parse --short=8 HEAD)" \
#       --build-arg BUILD_VERSION="1.0.0"
#
#   $ podman run --init --interactive --tty --rm --network host \
#       --env-file ./.env --env SESSION_COOKIE_SECURE=false \
#       --name vacman-frontend vacman-frontend
#

# ---------------------------------------------------------------------------- #

# Stage: Base image
# The base image provides the foundation for all subsequent stages.
# It uses a slim nodejs image optimized for production, based on Debian Bookworm.
#
# To quickly check if there is an update to the base image, run:
#   $ podman search --limit 25000 --list-tags docker.io/library/node \
#         | grep 'slim' | awk '{print $2}' | sort --version-sort
#
FROM docker.io/library/node:22.15.0-bookworm-slim AS base

ENV NODE_ENV production

# Install pnpm using corepack (included with nodejs)
RUN corepack enable && corepack prepare pnpm@10.10.0 --activate && corepack cache clean

# ---------------------------------------------------------------------------- #

# Stage: Dependencies
# This stage installs all project dependencies, including development packages.
# These dependencies are used for building and testing the application in subsequent stages.
FROM base as deps

WORKDIR /home/node
COPY --chown=node:node package.json pnpm-lock.yaml ./

USER node
RUN pnpm install --frozen-lockfile

# ---------------------------------------------------------------------------- #

# Stage: Runtime Dependencies
# This stage removes development dependencies, keeping only the runtime dependencies.
# This minimizes the final image size and reduces the attack surface for production environments.
FROM base as runtime-deps

WORKDIR /home/node
COPY --from=deps --chown=node:node /home/node/node_modules/ ./node_modules/
COPY --chown=node:node package.json pnpm-lock.yaml ./

USER node
RUN pnpm install --prod --frozen-lockfile

# ---------------------------------------------------------------------------- #

# Stage: Build
# This stage compiles the application, generating production-ready build artifacts.
# It includes metadata for build traceability and installs additional tools as needed.
FROM base as build

WORKDIR /home/node
COPY --from=deps --chown=node:node /home/node/node_modules/ ./node_modules/
COPY --from=deps --chown=node:node /home/node/package.json ./package.json
COPY --from=deps --chown=node:node /home/node/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --chown=node:node ./app/ ./app/
COPY --chown=node:node ./public/ ./public/
COPY --chown=node:node ./react-router.config.ts ./react-router.config.ts
COPY --chown=node:node ./tsconfig.json ./tsconfig.json
COPY --chown=node:node ./vite.config.ts ./vite.config.ts
COPY --chown=node:node ./vite.server.config.ts ./vite.server.config.ts

USER node
RUN pnpm run build

# ---------------------------------------------------------------------------- #

# Stage: Final Production Image
# The final image is optimized for running the application in production.
# It contains only the runtime dependencies and compiled application code.
FROM base as final

ARG BUILD_DATE="1970-01-01T00:00:00.000Z"
ARG BUILD_ID="000000"
ARG BUILD_REVISION="00000000"
ARG BUILD_VERSION="0.0.0"
ARG IMAGE_AUTHORS="Digital Technology Solutions"
ARG IMAGE_DESCRIPTION="Vacancy Manager -- Frontend Application"
ARG IMAGE_TITLE="vacman-frontend"
ARG IMAGE_URL="https://github.com/DTS-STN/vacman/"
ARG IMAGE_VENDOR="Employment and Social Development Canada"

ENV BUILD_DATE=${BUILD_DATE}
ENV BUILD_ID=${BUILD_ID}
ENV BUILD_REVISION=${BUILD_REVISION}
ENV BUILD_VERSION=${BUILD_VERSION}
ENV OTEL_SERVICE_NAME=${IMAGE_TITLE}
ENV OTEL_SERVICE_VERSION=${BUILD_VERSION}

# Add labels for OCI compliance, describing the build details and image metadata
# see: https://github.com/opencontainers/image-spec/blob/main/annotations.md
LABEL org.opencontainers.image.authors=${IMAGE_AUTHORS}
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.description=${IMAGE_DESCRIPTION}
LABEL org.opencontainers.image.revision=${BUILD_REVISION}
LABEL org.opencontainers.image.title=${IMAGE_TITLE}
LABEL org.opencontainers.image.url=${IMAGE_URL}
LABEL org.opencontainers.image.vendor=${IMAGE_VENDOR}
LABEL org.opencontainers.image.version=${BUILD_VERSION}

WORKDIR /home/node
COPY --from=runtime-deps --chown=node:node /home/node/node_modules/ ./node_modules/
COPY --from=build --chown=node:node /home/node/build/ ./build/

USER node
CMD ["node", "--import", "./build/server/telemetry.js", "./build/server/server.js"]
